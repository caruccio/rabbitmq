kind: Template
metadata:
  name: rabbitmq

parameters:
- name: NAME
  value: rabbitmq
- name: POD_MEMORY
  value: "8Gi"
- name: REPLICAS
  value: "1"
- name: RABBITMQ_STORAGE_SIZE
  value: "10Gi"
- name: NAMESPACE
  required: true
- name: RABBIT_COOKIE
  from: '[a-zA-Z0-9]{60}'
  generate: expression
- name: HIPE_COMPILE
  value: "true"

objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}

- apiVersion: security.openshift.io/v1
  kind: SecurityContextConstraints
  metadata:
    name: ${NAME}
  allowHostDirVolumePlugin: false
  allowHostIPC: false
  allowHostNetwork: false
  allowHostPID: false
  allowHostPorts: true
  allowPrivilegedContainer: false
  allowedCapabilities:
  - '*'
  allowedFlexVolumes: null
  defaultAddCapabilities: null
  fsGroup:
    type: RunAsAny
  groups:
  - system:cluster-admins
  - system:nodes
  - system:masters
  readOnlyRootFilesystem: false
  requiredDropCapabilities: null
  runAsUser:
    type: RunAsAny
  seLinuxContext:
    type: RunAsAny
  seccompProfiles:
  - '*'
  supplementalGroups:
    type: RunAsAny
  users:
  - system:serviceaccount:${NAMESPACE}:${NAME}
  volumes:
  - '*'

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: ${NAME}
  roleRef:
    apiGroup: authorization.openshift.io/v1
    kind: ClusterRole
    name: ${NAME}
  subjects:
  - kind: ServiceAccount
    name: ${NAME}
    namespace: ${NAMESPACE}

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRole
  metadata:
    name: ${NAME}
    namespace: ${NAMESPACE}
  rules:
  - apiGroups:
    - '*'
    resources:
    - 'endpoints'
    verbs:
    - 'get'

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
    creationTimestamp: null
    name: ${NAME}
  spec:
    type: ClusterIP
    clusterIP: None
    sessionAffinity: None
    ports:
    - port: 9090
      name: exporter
      targetPort: exporter
      protocol: TCP
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: clustering
      port: 25672
      protocol: TCP
      targetPort: 25672
    - name: web
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: epmd
      port: 4369
      protocol: TCP
      targetPort: 4369
    selector:
      app: ${NAME}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${NAME}-config
  data:
    enabled_plugins: |-
      [rabbitmq_management, rabbitmq_peer_discovery_k8s].
    rabbitmq.conf.in: |-
      vm_memory_high_watermark.absolute = ${RABBITMQ_MAX_MEMORY}
      listeners.tcp.default = 5672
      hipe_compile = ${HIPE_COMPILE}
      loopback_users = none
      disk_free_limit.absolute = ${RABBITMQ_STORAGE_SIZE}
      management.listener.port = 15672
      management.listener.ssl = false
      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
      #cluster_formation.k8s.host = kubernetes.default.svc
      cluster_formation.k8s.service_name = ${NAME}
      cluster_formation.k8s.address_type = ip
      cluster_formation.randomized_startup_delay_range.min = 0
      cluster_formation.randomized_startup_delay_range.max = 2
      cluster_formation.node_cleanup.interval = 10
      # Set to false if automatic removal of unknown/absent nodes
      # is desired. This can be dangerous, see
      #  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
      #  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${NAME}
  spec:
    podManagementPolicy: OrderedReady
    replicas: "${{REPLICAS}}"
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ${NAME}
    serviceName: ${NAME}
    template:
      metadata:
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
        labels:
          app: ${NAME}
      spec:
        containers:
        - image: kbudde/rabbitmq-exporter
          name: rabbitmq-exporter
          ports:
          - containerPort: 9090
            name: exporter
          resources:
            limits:
              cpu: "100m"
              memory: "64Mi"
            requests:
              cpu: "100m"
              memory: "64Mi"
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: RABBITMQ_NODENAME
            value: "rabbitmq@$(POD_IP)"
          - name: REPLICAS
            value: "${REPLICAS}"
          - name: RABBITMQ_STORAGE_SIZE
            value: "${RABBITMQ_STORAGE_SIZE}"
          - name: RABBIT_COOKIE
            value: "${RABBIT_COOKIE}"
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SERVICE_NAME
            value: ${NAME}
          image: getupcloud/rabbitmq:latest
          imagePullPolicy: Always
          name: rabbitmq
          ports:
          - containerPort: 5672
            name: ampq
            protocol: TCP
          - containerPort: 25672
            name: clustering
            protocol: TCP
          - containerPort: 15672
            name: web
            protocol: TCP
          - containerPort: 4369
            name: epmd
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /var/lib/rabbitmq/mnesia
            name: ${NAME}
          - name: rabbitmq-config
            mountPath: /config
            readOnly: false
          resources:
            limits:
              cpu: "1900m"
              memory: "${POD_MEMORY}"
            requests:
              cpu: "1"
              memory: "${POD_MEMORY}"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 0
        serviceAccount: ${NAME}
        serviceAccountName: ${NAME}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: rabbitmq-config
          configMap:
            name: ${NAME}-config
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: ${NAME}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "${RABBITMQ_STORAGE_SIZE}"
    test: false
    triggers:
    - type: ConfigChange

